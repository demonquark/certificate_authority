# Define the parameters for a specific virtual host/server
server {
    # Define the directory where the contents being requested are stored
    root /srv/www/certificate_authority/web;

    # Define the server name, IP address, and/or port of the server
    listen 8080;
    listen [::]:8080;
    server_name kris.local www.kris.local;

    # Define the SSL certificate
    ssl on;
    ssl_certificate     /srv/www/certificate_authority/ssl/web/cert.pem;
    ssl_certificate_key /srv/www/certificate_authority/ssl/web/key.pem;
    # ssl_password_file   /srv/www/certificate_authority/ssl/web/global.pass;

    # Define the specified charset to the “Content-Type” response header field
    charset utf-8;

    # Configure NGINX to deliver static content from the specified folder
    location = / {
        try_files $uri  @web;
    }

    location / {
        try_files $uri $uri/ @web;
    }

    location @web {
        # Define the location of the proxy server to send the request to
        proxy_pass http://web:8000;

        # Redefine the header fields that NGINX sends to the upstream server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Define the maximum file size on file uploads
        client_max_body_size 5M;
        client_body_buffer_size 5M;
    }

}

server {
    # Define the directory where the contents being requested are stored
    root /srv/www/certificate_authority/api;

    # Define the server name, IP address, and/or port of the server
    listen 8080;
    listen [::]:8080;
    server_name api.kris.local;

    # Define the SSL certificate
    ssl on;
    ssl_certificate     /srv/www/certificate_authority/ssl/api/cert.pem;
    ssl_certificate_key /srv/www/certificate_authority/ssl/api/key.pem;
    # ssl_password_file   /srv/www/certificate_authority/ssl/api/global.pass;

    # Define SSL client authentication
    ssl_client_certificate  /srv/www/certificate_authority/ssl/client/cert.pem;
    ssl_verify_client       on;
    ssl_verify_depth        2;

    # Define the specified charset to the “Content-Type” response header field
    charset utf-8;

    # Configure NGINX to deliver static content from the specified folder
    location / {
        deny all;
        return 404;
    }

    location = /dienst/ {
        try_files $uri  @dienst;
    }

    location = /ca/ {
        try_files $uri  @ca;
    }

    location /dienst/ {
        try_files $uri $uri/ @dienst;
    }

    location /ca/ {
        try_files $uri $uri/ @ca;
    }

    location @dienst {
        rewrite ^/dienst(/.*)$ $1 break;

        # Define the location of the proxy server to send the request to
        proxy_pass http://dienst:8000;

        # Redefine the header fields that NGINX sends to the upstream server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-SSL-Client-Finger $ssl_client_fingerprint;
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
        proxy_set_header X-SSL-Client-S-DN   $ssl_client_s_dn;
 
        # Define the maximum file size on file uploads
        client_max_body_size 5M;
        client_body_buffer_size 5M;
    }

    location @ca {
        rewrite ^/ca(/.*)$ $1 break;

        # Define the location of the proxy server to send the request to
        proxy_pass http://ca:8000;

        # Redefine the header fields that NGINX sends to the upstream server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-SSL-Client-Finger $ssl_client_fingerprint;
        proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
        proxy_set_header X-SSL-Client-S-DN   $ssl_client_s_dn;
 
        # Define the maximum file size on file uploads
        client_max_body_size 5M;
        client_body_buffer_size 5M;
    }

}
