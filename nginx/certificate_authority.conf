# Define the parameters for a specific virtual host/server
server {
    # Define the directory where the contents being requested are stored
    root /srv/www/certificate_authority;

    # Define the server name, IP address, and/or port of the server
    listen 8080;
    listen [::]:8080;
    server_name kris.local;
    # server_name xxx.yyy.zzz.aaa

    # Define the specified charset to the “Content-Type” response header field
    charset utf-8;

    # Configure NGINX to deliver static content from the specified folder
    location = / {
        try_files $uri  @web;
    }

    location = /dienst/ {
        try_files $uri  @dienst;
    }

    location / {
        try_files $uri $uri/ @web;
    }

    location /dienst/ {
        try_files $uri $uri/ @dienst;
    }

    location @web {
        # Define the location of the proxy server to send the request to
        proxy_pass http://web:8000;

        # Redefine the header fields that NGINX sends to the upstream server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Define the maximum file size on file uploads
        client_max_body_size 5M;
        client_body_buffer_size 5M;
    }

    location @dienst {
        rewrite ^/dienst(/.*)$ $1 break;

        # Define the location of the proxy server to send the request to
        proxy_pass http://dienst:8000;

        # Redefine the header fields that NGINX sends to the upstream server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Define the maximum file size on file uploads
        client_max_body_size 5M;
        client_body_buffer_size 5M;
    }
}

server {
    # Define the directory where the contents being requested are stored
    root /srv/www/certificate_authority;

    # Define the server name, IP address, and/or port of the server
    listen 8081;
    listen [::]:8081;
    ssl    on;
    server_name kris.local;
    # server_name xxx.yyy.zzz.aaa
    # ssl_password_file   /srv/www/certificate_authority/ssl/global.pass;
    ssl_certificate     /srv/www/certificate_authority/ssl/cert.pem;
    ssl_certificate_key /srv/www/certificate_authority/ssl/key.pem;

    # Define the specified charset to the “Content-Type” response header field
    charset utf-8;

    # Configure NGINX to deliver static content from the specified folder
    location = / {
        try_files $uri  @dienst;
    }

    location = /dienst/ {
        try_files $uri  @web;
    }

    location / {
        try_files $uri $uri/ @dienst;
    }

    location /dienst/ {
        try_files $uri $uri/ @web;
    }

    location @web {
        # Define the location of the proxy server to send the request to
        proxy_pass http://web:8000;

        # Redefine the header fields that NGINX sends to the upstream server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Define the maximum file size on file uploads
        client_max_body_size 5M;
        client_body_buffer_size 5M;
    }

    location @dienst {
        rewrite ^/dienst(/.*)$ $1 break;

        # Define the location of the proxy server to send the request to
        proxy_pass http://dienst:8000;

        # Redefine the header fields that NGINX sends to the upstream server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Define the maximum file size on file uploads
        client_max_body_size 5M;
        client_body_buffer_size 5M;
    }
}
